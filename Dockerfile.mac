FROM mubox/mac-env

ARG INSTALLER_VERSION
ARG MICROBOX_VERSION
ARG VIRTUALBOX_VERSION
ARG VIRTUALBOX_REVISION
ARG DOCKER_MACHINE_VERSION
ARG TUNNELBLICK_VERSION=3.8.8b
ARG TUNNELBLICK_VERSION_FULL=${TUNNELBLICK_VERSION}_build_5777

# fetch microbox
RUN curl -fsSL -o microbox-amd64 "https://s3.amazonaws.com/tools.microbox.cloud/microbox/v${MICROBOX_VERSION}/darwin/amd64/microbox"
RUN chmod +x /microbox-amd64
RUN curl -fsSL -o microbox-arm64 "https://s3.amazonaws.com/tools.microbox.cloud/microbox/v${MICROBOX_VERSION}/darwin/arm64/microbox"
RUN chmod +x /microbox-arm64

# fetch microbox-update
RUN curl -fsSL -o microbox-amd64-update "https://s3.amazonaws.com/tools.microbox.cloud/microbox/v${MICROBOX_VERSION}/darwin/amd64/microbox-update"
RUN chmod +x /microbox-amd64-update
RUN curl -fsSL -o microbox-arm64-update "https://s3.amazonaws.com/tools.microbox.cloud/microbox/v${MICROBOX_VERSION}/darwin/arm64/microbox-update"
RUN chmod +x /microbox-arm64-update

# fetch openvpn
RUN curl -fsSL -o microbox-amd64-vpn "https://s3.amazonaws.com/tools.microbox.cloud/openvpn/darwin/amd64/openvpn"
RUN chmod +x /microbox-amd64-vpn
RUN curl -fsSL -o microbox-arm64-vpn "https://s3.amazonaws.com/tools.microbox.cloud/openvpn/darwin/arm64/openvpn"
RUN chmod +x /microbox-arm64-vpn

# fetch docker-machine
RUN curl -fsSL -o microbox-machine "https://github.com/docker/machine/releases/download/v${DOCKER_MACHINE_VERSION}/docker-machine-Darwin-x86_64"
RUN chmod +x /microbox-machine
# Docker Machine was discontinued long before the M1 was announced,
# so it isn't available for arm64

# fetch osx TUN/TAP drivers from Tunnelblick
RUN curl -fsSL -o Tunnelblick.zip "https://github.com/Tunnelblick/Tunnelblick/releases/download/v${TUNNELBLICK_VERSION}/Tunnelblick_${TUNNELBLICK_VERSION_FULL}.zip"
RUN unzip Tunnelblick.zip && \
	mv Tunnelblick.app/Contents/Resources/*.kext / && \
	rm -r Tunnelblick.*

RUN mkdir -p /mpkg

# Add components
COPY mac/mpkg/Distribution /mpkg/Distribution

COPY mac/mpkg/Resources /mpkg/Resources

# microbox-amd64.pkg
COPY mac/mpkg/microbox.pkg /mpkg/microbox-amd64.pkg
RUN cd /mpkg/microbox-amd64.pkg && \
	mkdir rootfs && \
	cd rootfs && \
    mkdir -p usr/local/bin && \
    mkdir -p Library/Extensions && \
	mv /microbox-amd64 usr/local/bin/microbox && \
	mv /microbox-amd64-update usr/local/bin/microbox-update && \
	mv /microbox-amd64-vpn usr/local/bin/microbox-vpn && \
	mv /microbox-machine usr/local/bin/microbox-machine && \
	cp -r /*.kext Library/Extensions/ && \
	find . | cpio -o --format odc | gzip -c > ../Payload && \
	mkbom . ../Bom && \
	sed -i \
		-e "s/%MICROBOX_NUMBER_OF_FILES%/`find . | wc -l`/g" \
		-e "s/%MICROBOX\(_AMD64\)\?_INSTALL_KBYTES%/`du -sk | cut -f1`/g" \
		-e "s/%MICROBOX_VERSION%/${MICROBOX_VERSION}/g" \
		-e "s/%INSTALLER_VERSION%/${INSTALLER_VERSION}/g" \
		../PackageInfo /mpkg/Distribution /mpkg/Resources/en.lproj/welcome.rtfd/TXT.rtf /mpkg/Resources/en.lproj/Localizable.strings && \
	cd .. && \
	rm -rf ./rootfs

# microbox-arm64.pkg
COPY mac/mpkg/microbox.pkg /mpkg/microbox-arm64.pkg
RUN cd /mpkg/microbox-arm64.pkg && \
	mkdir rootfs && \
	cd rootfs && \
    mkdir -p usr/local/bin && \
    mkdir -p Library/Extensions && \
	mv /microbox-arm64 usr/local/bin/microbox && \
	mv /microbox-arm64-update usr/local/bin/microbox-update && \
	mv /microbox-arm64-vpn usr/local/bin/microbox-vpn && \
	cp -r /*.kext Library/Extensions/ && \
	find . | cpio -o --format odc | gzip -c > ../Payload && \
	mkbom . ../Bom && \
	sed -i \
		-e "s/%MICROBOX_NUMBER_OF_FILES%/`find . | wc -l`/g" \
		-e "s/%MICROBOX\(_ARM64\)\?_INSTALL_KBYTES%/`du -sk | cut -f1`/g" \
		-e "s/%MICROBOX_VERSION%/${MICROBOX_VERSION}/g" \
		-e "s/%INSTALLER_VERSION%/${INSTALLER_VERSION}/g" \
		../PackageInfo /mpkg/Distribution /mpkg/Resources/en.lproj/welcome.rtfd/TXT.rtf /mpkg/Resources/en.lproj/Localizable.strings && \
	cd .. && \
	rm -rf ./rootfs

# Repackage back. Yes, --compression=none is mandatory.
# or this won't install in OSX.
RUN cd /mpkg && \
	xar -c --compression=none -f /Microbox.pkg .

COPY certs/mac /certs
RUN cd /mpkg && \
	xar --sign -f /Microbox.pkg --digestinfo-to-sign digestinfo.dat \
	--sig-size 256 \
	--cert-loc /certs/cert00 && \
	openssl rsautl -sign -inkey /certs/key.pem -in digestinfo.dat \
	-out signature.dat && \
	xar --inject-sig signature.dat -f /Microbox.pkg
