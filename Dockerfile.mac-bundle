FROM mubox/mac-env

ARG INSTALLER_VERSION
ARG MICROBOX_VERSION
ARG VIRTUALBOX_VERSION
ARG VIRTUALBOX_REVISION
ARG DOCKER_MACHINE_VERSION
ARG TUNNELBLICK_VERSION=3.8.7a
ARG TUNNELBLICK_VERSION_FULL=${TUNNELBLICK_VERSION}_build_5770

# fetch microbox
RUN curl -fsSL -o microbox "https://s3.amazonaws.com/tools.microbox.cloud/microbox/v${MICROBOX_VERSION}/darwin/amd64/microbox"
RUN chmod +x /microbox

# fetch microbox-update
RUN curl -fsSL -o microbox-update "https://s3.amazonaws.com/tools.microbox.cloud/microbox/v${MICROBOX_VERSION}/darwin/amd64/microbox-update"
RUN chmod +x /microbox-update

# fetch openvpn
RUN curl -fsSL -o microbox-vpn "https://s3.amazonaws.com/tools.microbox.cloud/openvpn/darwin/amd64/openvpn"
RUN chmod +x /microbox-vpn

# fetch docker-machine
RUN curl -fsSL -o microbox-machine "https://github.com/docker/machine/releases/download/v${DOCKER_MACHINE_VERSION}/docker-machine-Darwin-x86_64"
RUN chmod +x /microbox-machine

# fetch osx TUN/TAP drivers from Tunnelblick
RUN curl -fsSL -o Tunnelblick.zip "https://github.com/Tunnelblick/Tunnelblick/releases/download/v${TUNNELBLICK_VERSION}/Tunnelblick_${TUNNELBLICK_VERSION_FULL}.zip"
RUN unzip Tunnelblick.zip && \
	mkdir -p /mpkg && \
	mv Tunnelblick.app/Contents/Resources/*.kext /mpkg && \
	rm -r Tunnelblick.*

COPY /virtualbox/VirtualBox-${VIRTUALBOX_VERSION}-${VIRTUALBOX_REVISION}-OSX.dmg /vbox.dmg

#  Extract the VirtualBox .pkg
RUN mkdir -p /mpkg/vbox && \
	cd /mpkg/vbox && \
	7z x /vbox.dmg -ir'!*.pkg' && \
	mv VirtualBox/VirtualBox.pkg . && \
	rm -rf vbox.dmg 

# Extract the .pkg files
RUN cd /mpkg/vbox && \
	mv VirtualBox.pkg /tmp && \
	xar -xf /tmp/VirtualBox.pkg && \
	rm -rf /tmp/VirtualBox.pkg

RUN cd /mpkg/vbox && \
	mv *.pkg .. && \
	cd .. && \
	rm -rf vbox

# Add components
COPY mac-bundle/mpkg/Distribution /mpkg/Distribution

COPY mac-bundle/mpkg/Resources /mpkg/Resources

# microboxBundle.pkg
COPY mac-bundle/mpkg/microboxBundle.pkg /mpkg/microboxBundle.pkg
RUN cd /mpkg/microboxBundle.pkg && \
	mkdir rootfs && \
	cd rootfs && \
    mkdir -p usr/local/bin && \
	mkdir -p Library/Extensions && \
	mv /microbox usr/local/bin/ && \
	mv /microbox-update usr/local/bin/ && \
	mv /microbox-vpn usr/local/bin/ && \
	mv /microbox-machine usr/local/bin/ && \
	mv /mpkg/*.kext Library/Extensions/ && \
	find . | cpio -o --format odc | gzip -c > ../Payload && \
	mkbom . ../Bom && \
	sed -i \
		-e "s/%MICROBOX_NUMBER_OF_FILES%/`find . | wc -l`/g" \
		-e "s/%MICROBOX_INSTALL_KBYTES%/`du -sk | cut -f1`/g" \
		-e "s/%MICROBOX_VERSION%/${MICROBOX_VERSION}/g" \
		-e "s/%INSTALLER_VERSION%/${INSTALLER_VERSION}/g" \
		-e "s/%VIRTUALBOX_VERSION%/${VIRTUALBOX_VERSION}/g" \
		../PackageInfo /mpkg/Distribution /mpkg/Resources/en.lproj/welcome.rtfd/TXT.rtf /mpkg/Resources/en.lproj/Localizable.strings && \
	cd .. && \
	rm -rf ./rootfs

# Repackage back. Yes, --compression=none is mandatory.
# or this won't install in OSX.
RUN cd /mpkg && \
	xar -c --compression=none -f /MicroboxBundle.pkg .

COPY certs/mac /certs
RUN cd /mpkg && \
	xar --sign -f /MicroboxBundle.pkg --digestinfo-to-sign digestinfo.dat \
	--sig-size 256 \
	--cert-loc /certs/cert00 && \
	openssl rsautl -sign -inkey /certs/key.pem -in digestinfo.dat \
	-out signature.dat && \
	xar --inject-sig signature.dat -f /MicroboxBundle.pkg
