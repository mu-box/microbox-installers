<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<installer-gui-script minSpecVersion="1">
    <title>microbox_title</title>
    <options customize="allow" allow-external-scripts="yes" rootVolumeOnly="true" hostArchitectures="x86_64"/>
    <background file="microbox.png" alignment="bottomleft" scaling="none"/>
    <welcome file="welcome.rtfd" mime-type="text/rtfd"/>
    <choices-outline>
        <line choice="choiceMicrobox"/>
        <line choice="choiceVBox"/>
    </choices-outline>
    <choice id="choiceMicrobox" title="choiceMicrobox_title" description="choiceMicrobox_msg" start_enabled="false" start_selected="true" start_visible="true">
        <pkg-ref id="cloud.microbox.pkg.microbox"/>
    </choice>
    <choice id="choiceVBox" title="choiceVBox_title" description="choiceVBox_msg" start_selected="vboxNeedsUpgrade()" start_enabled="vboxNeedsUpgrade()" start_visible="vboxNeedsUpgrade()">
        <pkg-ref id="org.virtualbox.pkg.vboxkexts"/>
        <pkg-ref id="org.virtualbox.pkg.virtualbox"/>
        <pkg-ref id="org.virtualbox.pkg.virtualboxcli"/>
    </choice>
    <pkg-ref id="cloud.microbox.pkg.microbox" auth="Root" version="%MICROBOX_VERSION%" installKBytes="%MICROBOX_INSTALL_KBYTES%">#microboxBundle.pkg</pkg-ref>
    <pkg-ref id="org.virtualbox.pkg.vboxkexts" auth="Root" version="%VIRTUALBOX_VERSION%" installKBytes="544">#VBoxKEXTs.pkg</pkg-ref>
    <pkg-ref id="org.virtualbox.pkg.virtualbox" auth="Root" version="%VIRTUALBOX_VERSION%" installKBytes="174326">#VirtualBox.pkg</pkg-ref>
    <pkg-ref id="org.virtualbox.pkg.virtualboxcli" auth="Root" version="%VIRTUALBOX_VERSION%" installKBytes="5">#VirtualBoxCLI.pkg</pkg-ref>
    <pkg-ref id="cloud.microbox.pkg.microbox">
        <bundle-version/>
    </pkg-ref>
    <pkg-ref id="org.virtualbox.pkg.vboxkexts">
        <bundle-version>
            <bundle CFBundleShortVersionString="%VIRTUALBOX_VERSION%" CFBundleVersion="%VIRTUALBOX_VERSION%" id="org.virtualbox.kext.VBoxNetAdp" path="VBoxNetAdp.kext"/>
            <bundle CFBundleShortVersionString="%VIRTUALBOX_VERSION%" CFBundleVersion="%VIRTUALBOX_VERSION%" id="org.virtualbox.kext.VBoxDrv" path="VBoxDrv.kext"/>
            <bundle CFBundleShortVersionString="%VIRTUALBOX_VERSION%" CFBundleVersion="%VIRTUALBOX_VERSION%" id="org.virtualbox.kext.VBoxNetFlt" path="VBoxNetFlt.kext"/>
            <bundle CFBundleShortVersionString="%VIRTUALBOX_VERSION%" CFBundleVersion="%VIRTUALBOX_VERSION%" id="org.virtualbox.kext.VBoxUSB" path="VBoxUSB.kext"/>
        </bundle-version>
    </pkg-ref>
    <pkg-ref id="org.virtualbox.pkg.virtualbox">
        <bundle-version>
            <bundle CFBundleShortVersionString="%VIRTUALBOX_VERSION%" CFBundleVersion="%VIRTUALBOX_VERSION%" id="org.virtualbox.app.VirtualBox" path="VirtualBox.app"/>
        </bundle-version>
    </pkg-ref>
    <pkg-ref id="org.virtualbox.pkg.virtualboxcli">
        <bundle-version/>
    </pkg-ref>

    <product id="cloud.microbox.mpkg.microbox" version="%INSTALLER_VERSION%"/>

    <!-- Manually imported VBox Stuff -->
    <installation-check script="checkPrerequisite()"/>
    <script>
    <![CDATA[
    /* js:pkmk:start */
    function checkPrerequisite()
    {
       try
       {
           test = system.sysctl('hw.machine');
           system.log("Hardware architecture detected: " + test);
           result = (test == 'x86_64');
       } catch (e) { system.log(e); result = false; }

       if (!result)
       {
           my.result.type = 'Fatal';
           my.result.title = system.localizedString('UNSUPPORTED_HW_MACHINE_TLE');
           my.result.message = system.localizedString('UNSUPPORTED_HW_MACHINE_MSG');
           return result;
       }

       try
       {
           test = system.version['ProductVersion'];
           system.log("OS version detected: " + test);
           result = (system.compareVersions(test, '10.8') >= 0);
       } catch (e) { system.log(e); result = false; }

       if (!result)
       {
           my.result.type = 'Fatal';
           my.result.title = system.localizedString('UNSUPPORTED_OS_TLE');
           my.result.message = system.localizedString('UNSUPPORTED_OS_MSG');
           return result;
       }

       try
       {
           /* Embedded scripts are not available here. So, just do a command
           line checking for running VMs instead. */
           if (vboxNeedsUpgrade()) {
               system.log(vboxplist.CFBundleVersion);
               rcScript = system.run('/bin/sh', '-c', '/bin/ps -e | /usr/bin/grep -E "VirtualBox|VirtualBox.*startvm|VBoxNetDHCP|VBoxNetNAT|VBoxHeadless|VBoxSVC" | /usr/bin/grep -qv grep');
               result = (rcScript != 0);
               system.log("system.run /bin/sh .. returned: " + rcScript + " result=" + result);
           }
       } catch (e) { system.log(e); }

       if (!result)
       {
           my.result.type = 'Fatal';
           my.result.title = system.localizedString('RUNNING_VMS_TLE');
           my.result.message = system.localizedString('RUNNING_VMS_MSG');
           return result;
       }

       system.log("result:" + result);
       return result;
     }

     function vboxNeedsUpgrade ()
     {
         try {
             vboxplist = system.files.plistAtPath('/Applications/VirtualBox.app/Contents/Info.plist');
             if (!vboxplist || !vboxplist.CFBundleVersion || system.compareVersions(vboxplist.CFBundleVersion, '%VIRTUALBOX_VERSION%') === -1) {
                 system.log("vbox result:" + true);
                 return true;
             }

             system.log("vbox result:" + false);
             return false;
         } catch (e){ system.log(e); system.log("vbox result:" + false); return false; }
     }
     /* js:pkmk:end */
     ]]>
    </script>
</installer-gui-script>
